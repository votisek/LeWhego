main.py: 
import controller_driver
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor
from pybricks.ev3devices import ColorSensor
from pybricks.ev3devices import TouchSensor
from pybricks.ev3devices import UltrasonicSensor
from pybricks.parameters import Port
from pybricks.parameters import Color
from brick1 import *
from brick2 import *
import threading

driver = controller_driver.Driver(controller_driver.mapping)
driver_thread = threading.Thread(target=driver.do_stuff())
driver_thread.daemon = True
driver_thread.start()
main = True
while main:
    console = input("LEWHEGO>> ")
___
brick1.py:
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor
from pybricks.ev3devices import ColorSensor
from pybricks.ev3devices import TouchSensor
from pybricks.ev3devices import UltrasonicSensor
from pybricks.parameters import Port
from pybricks.parameters import Color

"""
accelerator = color = Port.S1
brake = color = Port.S3
"""

hub = EV3Brick()

accelerator = TouchSensor()
brake = TouchSensor()

class Output:
    def __init__(self):
        pass
    def accelerator(self): # Hodnota: 0x3
        if accelerator.pressed():
            return 0x311
        else:
            return 0x310
    
    def brake(self): # Hodnota: 0x4
        if brake.pressed():
            return 0x421
        else:
            return 0x420
___
brick2.py:
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor
from pybricks.ev3devices import ColorSensor
from pybricks.ev3devices import TouchSensor
from pybricks.ev3devices import UltrasonicSensor
from pybricks.ev3devices import GyroSensor
from pybricks.parameters import Port
from pybricks.parameters import Color

hub = EV3Brick()
"""
wheel = gyro = Port.S1
flap1 = motor = Port.S2
flap2 = motor = Port.S3
nitro = touch = Port.S4
"""
wheel = GyroSensor(Port.S1)
flap_l = TouchSensor(Port.S2)
flap_r = TouchSensor(Port.S3)
tlacitko = TouchSensor(Port.S4)

class Output:
    def __init__(self):
        pass
    
    def wheel(self): # Hodnota 0x1
        limited_angle = max(-90, min(90, wheel.angle()))
        hex_value = 0x100 + (limited_angle + 90)
        return hex(hex_value)

    def flaps(self): # Hodnota 0x2
        if flap_l.pressed() and flap_r.pressed():
            return 0x231
        elif flap_l.pressed():
            while flap_l.pressed():
                pass
            return 0x221
        elif flap_r.pressed():
            while flap_r.pressed():
                pass
            return 0x211
        else:
            return 0x200

    def tlacitko(self): # Hodnota 0x5
        if tlacitko.pressed():
            return 0x521
        else:
            return 0x520
controller_driver/__init.py: 
import pyautogui
import time
import brick1
import threading
import json
import vgamepad as vgp


with open("mapping.json", "r") as file:
    jsonmap = json.load(file)   

gp = vgp.VX360Gamepad()

class Driver:
    def __init__(self):
        self.mapping = currmap
        self.runner = False
        self.volant = None
        self.brzda = None
        self.plyn = None
        self.padla = None
        self.tlacitko = None

    def get_mapping(self, key, code):
        # Získá seznam hodnot pod klíčem (např. "brake", "flaps")
        values_list = self.mapping.get(key, [])
        
        # Projde seznam a hledá, jestli je "code" ve slovníku
        for item in values_list:
            if code in item:
                return item[code]
        return None

    def do_stuff(self):
        while self.runner:
                gp.left_joystick(self.get_mapping("volant", str(self.volant)), 0)
                gp.left_trigger(self.get_mapping("brzda", str(self.brzda)))
                gp.right_trigger(self.get_mapping("plyn", str(self.plyn)))
                match self.get_mapping("padla", padla):
                    case "slow":
                        gp.press_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_LEFT_SHOULDER)
                    case "jump":
                        gp.press_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_A)
                    case "slow+jump":
                        gp.press_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_LEFT_SHOULDER)
                        gp.press_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_A)
                    case "none":
                        gp.release_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_A)
                        gp.release_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_LEFT_SHOULDER)
                    case _:
                        print("wtf neco se rozbilo na padlech v driver")
                match self.get_mapping("tlacitko", self.tlacitko):
                    case "none":
                        gp.release_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_START)
                    case "start":
                        gp.press_button(vgp.XUSB_BUTTON.XUSB_GAMEPAD_START)
                    case _:
                        print("wtf neco se podelalo na tlacitku v driveru")
                gp.update()
    def do_console(self, console):
___
controller_driver/mapping.json:
{    
    "volant": [
        {"0x100": -32760},
        {"0x101": -32396},
        {"0x102": -32032},
        {"0x103": -31668},
        {"0x104": -31304},
        {"0x105": -30940},
        {"0x106": -30576},
        {"0x107": -30212},
        {"0x108": -29848},
        {"0x109": -29484},
        {"0x10a": -29120},
        {"0x10b": -28756},
        {"0x10c": -28392},
        {"0x10d": -28028},
        {"0x10e": -27664},
        {"0x10f": -27300},
        {"0x110": -26936},
        {"0x111": -26572},
        {"0x112": -26208},
        {"0x113": -25844},
        {"0x114": -25480},
        {"0x115": -25116},
        {"0x116": -24752},
        {"0x117": -24388},
        {"0x118": -24024},
        {"0x119": -23660},
        {"0x11a": -23296},
        {"0x11b": -22932},
        {"0x11c": -22568},
        {"0x11d": -22204},
        {"0x11e": -21840},
        {"0x11f": -21476},
        {"0x120": -21112},
        {"0x121": -20748},
        {"0x122": -20384},
        {"0x123": -20020},
        {"0x124": -19656},
        {"0x125": -19292},
        {"0x126": -18928},
        {"0x127": -18564},
        {"0x128": -18200},
        {"0x129": -17836},
        {"0x12a": -17472},
        {"0x12b": -17108},
        {"0x12c": -16744},
        {"0x12d": -16380},
        {"0x12e": -16016},
        {"0x12f": -15652},
        {"0x130": -15288},
        {"0x131": -14924},
        {"0x132": -14560},
        {"0x133": -14196},
        {"0x134": -13832},
        {"0x135": -13468},
        {"0x136": -13104},
        {"0x137": -12740},
        {"0x138": -12376},
        {"0x139": -12012},
        {"0x13a": -11648},
        {"0x13b": -11284},
        {"0x13c": -10920},
        {"0x13d": -10556},
        {"0x13e": -10192},
        {"0x13f": -9828},
        {"0x140": -9464},
        {"0x141": -9100},
        {"0x142": -8736},
        {"0x143": -8372},
        {"0x144": -8008},
        {"0x145": -7644},
        {"0x146": -7280},
        {"0x147": -6916},
        {"0x148": -6552},
        {"0x149": -6188},
        {"0x14a": -5824},
        {"0x14b": -5460},
        {"0x14c": -5096},
        {"0x14d": -4732},
        {"0x14e": -4368},
        {"0x14f": -4004},
        {"0x150": -3640},
        {"0x151": -3276},
        {"0x152": -2912},
        {"0x153": -2548},
        {"0x154": -2184},
        {"0x155": -1820},
        {"0x156": -1456},
        {"0x157": -1092},
        {"0x158": -728},
        {"0x159": -364},
        {"0x15a": 0},
        {"0x15b": 364},
        {"0x15c": 728},
        {"0x15d": 1092},
        {"0x15e": 1456},
        {"0x15f": 1820},
        {"0x160": 2184},
        {"0x161": 2548},
        {"0x162": 2912},
        {"0x163": 3276},
        {"0x164": 3640},
        {"0x165": 4004},
        {"0x166": 4368},
        {"0x167": 4732},
        {"0x168": 5096},
        {"0x169": 5460},
        {"0x16a": 5824},
        {"0x16b": 6188},
        {"0x16c": 6552},
        {"0x16d": 6916},
        {"0x16e": 7280},
        {"0x16f": 7644},
        {"0x170": 8008},
        {"0x171": 8372},
        {"0x172": 8736},
        {"0x173": 9100},
        {"0x174": 9464},
        {"0x175": 9828},
        {"0x176": 10192},
        {"0x177": 10556},
        {"0x178": 10920},
        {"0x179": 11284},
        {"0x17a": 11648},
        {"0x17b": 12012},
        {"0x17c": 12376},
        {"0x17d": 12740},
        {"0x17e": 13104},
        {"0x17f": 13468},
        {"0x180": 13832},
        {"0x181": 14196},
        {"0x182": 14560},
        {"0x183": 14924},
        {"0x184": 15288},
        {"0x185": 15652},
        {"0x186": 16016},
        {"0x187": 16380},
        {"0x188": 16744},
        {"0x189": 17108},
        {"0x18a": 17472},
        {"0x18b": 17836},
        {"0x18c": 18200},
        {"0x18d": 18564},
        {"0x18e": 18928},
        {"0x18f": 19292},
        {"0x190": 19656},
        {"0x191": 20020},
        {"0x192": 20384},
        {"0x193": 20748},
        {"0x194": 21112},
        {"0x195": 21476},
        {"0x196": 21840},
        {"0x197": 22204},
        {"0x198": 22568},
        {"0x199": 22932},
        {"0x19a": 23296},
        {"0x19b": 23660},
        {"0x19c": 24024},
        {"0x19d": 24388},
        {"0x19e": 24752},
        {"0x19f": 25116},
        {"0x1a0": 25480},
        {"0x1a1": 25844},
        {"0x1a2": 26208},
        {"0x1a3": 26572},
        {"0x1a4": 26936},
        {"0x1a5": 27300},
        {"0x1a6": 27664},
        {"0x1a7": 28028},
        {"0x1a8": 28392},
        {"0x1a9": 28756},
        {"0x1aa": 29120},
        {"0x1ab": 29484},
        {"0x1ac": 29848},
        {"0x1ad": 30212},
        {"0x1ae": 30576},
        {"0x1af": 30940},
        {"0x1b0": 31304},
        {"0x1b1": 31668},
        {"0x1b2": 32032},
        {"0x1b3": 32396}
    ],
    "brzda": [
        {"0x400": 0},
        {"0x401": 255}
    ],
    "plyn": [
        {"0x300": 0},
        {"0x301": 255}
    ],
    "padla": [
        {"0x200": "none"},
        {"0x211": "slow"},
        {"0x221": "jump"},
        {"0x231": "slow+jump"}
    ],
    "tlacitko": [
        {"0x500": ""},
        {"0x501": "start"}
    ]
}
